{"ast":null,"code":"var _jsxFileName = \"/home/anduser/Desktop/transaction/transaction/transaction/src/code/customField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport myCat from '../../src/myCat.png';\nimport itemImage from '../../src/item.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CustomField(props) {\n  _s();\n  useEffect(() => {\n    console.log(\"useEffect\");\n  });\n  const [arrState, setArrState] = useState(props.currentMap);\n  function createItems() {\n    const listItems = arrState.map((number, id) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line-item\",\n        id: id,\n        children: number.map((item, itemId) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleCellClick(id, itemId),\n            className: \"cell-item\",\n            id: itemId,\n            children: checkCellAndRender(item)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }, this);\n    });\n    return listItems;\n  }\n  function checkCellAndRender(item) {\n    if (item) {\n      if (item.isMyCat) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: myCat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 16\n        }, this);\n      }\n      if (item.isItem) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: itemImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 16\n        }, this);\n      }\n    } else return null;\n  }\n  function handleCellClick(clickRowId, clickCellId) {\n    if (arrState[clickRowId][clickCellId]) {\n      if (!arrState[clickRowId][clickCellId].isEmpty) {\n        props.renewMap('SecondMap');\n        // setArrState(props.currentMap);\n        return;\n      }\n    }\n    cleanOldCat(arrState, props.myCatCell);\n    updateElement(clickRowId, clickCellId, props.myCatCell);\n  }\n  function cleanOldCat(matrix, target) {\n    for (let i = 0; i < matrix.length; i++) {\n      const columnIndex = matrix[i].findIndex(element => element === target);\n      if (columnIndex !== -1) {\n        updateElement(i, columnIndex, null);\n      }\n    }\n  }\n  const updateElement = (rowIndex, columnIndex, newValue) => {\n    const updatedMatrix = [...arrState];\n    updatedMatrix[rowIndex][columnIndex] = newValue;\n    setArrState(updatedMatrix);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-field\",\n    children: createItems(arrState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomField, \"W90ZvAATVEOjqiPC08Q+2Ypc3Ck=\");\n_c = CustomField;\nvar _c;\n$RefreshReg$(_c, \"CustomField\");","map":{"version":3,"names":["React","useState","useEffect","myCat","itemImage","jsxDEV","_jsxDEV","CustomField","props","_s","console","log","arrState","setArrState","currentMap","createItems","listItems","map","number","id","className","children","item","itemId","onClick","handleCellClick","checkCellAndRender","fileName","_jsxFileName","lineNumber","columnNumber","isMyCat","src","isItem","clickRowId","clickCellId","isEmpty","renewMap","cleanOldCat","myCatCell","updateElement","matrix","target","i","length","columnIndex","findIndex","element","rowIndex","newValue","updatedMatrix","_c","$RefreshReg$"],"sources":["/home/anduser/Desktop/transaction/transaction/transaction/src/code/customField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport myCat from '../../src/myCat.png'\nimport itemImage from '../../src/item.png'\n\n\n\n\nexport default function CustomField(props) {\n\n  useEffect(() => { console.log(\"useEffect\") });\n  const [arrState, setArrState] = useState(props.currentMap);\n\n  function createItems() {\n    const listItems = arrState.map((number, id) => {\n      return <div className=\"line-item\" id={id}>\n        {number.map((item, itemId) => {\n          return <div onClick={() => handleCellClick(id, itemId)} className=\"cell-item\" id={itemId}>{checkCellAndRender(item)}</div>\n        })}\n      </div>\n    });\n    return listItems;\n  }\n\n  function checkCellAndRender(item) {\n    if (item) {\n      if (item.isMyCat) {\n        return <img src={myCat} />;\n      }\n      if (item.isItem) {\n        return <img src={itemImage} />;\n      }\n    } else return null;\n  }\n\n  function handleCellClick(clickRowId, clickCellId) {\n    if (arrState[clickRowId][clickCellId]) {\n      if (!arrState[clickRowId][clickCellId].isEmpty) {\n        props.renewMap('SecondMap');\n        // setArrState(props.currentMap);\n        return;\n      }\n    }\n    cleanOldCat(arrState, props.myCatCell);\n    updateElement(clickRowId, clickCellId, props.myCatCell);\n\n  }\n\n  function cleanOldCat(matrix, target) {\n    for (let i = 0; i < matrix.length; i++) {\n      const columnIndex = matrix[i].findIndex(element => element === target);\n      if (columnIndex !== -1) {\n        updateElement(i, columnIndex, null);\n      }\n    }\n  }\n\n  const updateElement = (rowIndex, columnIndex, newValue) => {\n    const updatedMatrix = [...arrState];\n    updatedMatrix[rowIndex][columnIndex] = newValue;\n    setArrState(updatedMatrix);\n  };\n\n  return (\n    <div className=\"custom-field\">{createItems(arrState)}</div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}